zookeeper.connect**Zookeeper host string**
advertised.host.name**DEPRECATED: only used when `advertised.listeners` or `listeners` are not set. Use `advertised.listeners` instead.  Hostname to publish to ZooKeeper for clients to use. In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, it will use the value for `host.name` if configured. Otherwise it will use the value returned from java.net.InetAddress.getCanonicalHostName().**null
advertised.listeners**Listeners to publish to ZooKeeper for clients to use, if different than the `listeners` config property. In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, the value for `listeners` will be used. Unlike `listeners` it is not valid to advertise the 0.0.0.0 meta-address.**null
advertised.port**DEPRECATED: only used when `advertised.listeners` or `listeners` are not set. Use `advertised.listeners` instead.  The port to publish to ZooKeeper for clients to use. In IaaS environments, this may need to be different from the port to which the broker binds. If this is not set, it will publish the same port that the broker binds to.**null
auto.create.topics.enable**Enable auto creation of topic on the server**true
auto.leader.rebalance.enable**Enables auto leader balancing. A background thread checks and triggers leader balance if required at regular intervals**true
background.threads**The number of threads to use for various background processing tasks**10
broker.id**The broker id for this server. If unset, a unique broker id will be generated.To avoid conflicts between zookeeper generated broker id's and user configured broker id's, generated broker ids start from reserved.broker.max.id + 1.**-1
compression.type**Specify the final compression type for a given topic. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4'). It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer' which means retain the original compression codec set by the producer.**producer
delete.topic.enable**Enables delete topic. Delete topic through the admin tool will have no effect if this config is turned off**true
host.name**DEPRECATED: only used when `listeners` is not set. Use `listeners` instead.  hostname of broker. If this is set, it will only bind to this address. If this is not set, it will bind to all interfaces**""
leader.imbalance.check.interval.seconds**The frequency with which the partition rebalance check is triggered by the controller**300
leader.imbalance.per.broker.percentage**The ratio of leader imbalance allowed per broker. The controller would trigger a leader balance if it goes above this value per broker. The value is specified in percentage.**10
listeners**Listener List - Comma-separated list of URIs we will listen on and the listener names. If the listener name is not a security protocol, listener.security.protocol.map must also be set.  Specify hostname as 0.0.0.0 to bind to all interfaces.  Leave hostname empty to bind to default interface.  Examples of legal listener lists:  PLAINTEXT://myhost:9092,SSL://:9091  CLIENT://0.0.0.0:9092,REPLICATION://localhost:9093 **null
log.dir**The directory in which the log data is kept (supplemental for log.dirs property)**/tmp/kafka-logs
log.dirs**The directories in which the log data is kept. If not set, the value in log.dir is used**null
log.flush.interval.messages**The number of messages accumulated on a log partition before messages are flushed to disk **9223372036854775807
log.flush.interval.ms**The maximum time in ms that a message in any topic is kept in memory before flushed to disk. If not set, the value in log.flush.scheduler.interval.ms is used**null
log.flush.offset.checkpoint.interval.ms**The frequency with which we update the persistent record of the last flush which acts as the log recovery point**60000
log.flush.scheduler.interval.ms**The frequency in ms that the log flusher checks whether any log needs to be flushed to disk**9223372036854775807
log.flush.start.offset.checkpoint.interval.ms**The frequency with which we update the persistent record of log start offset**60000
log.retention.bytes**The maximum size of the log before deleting it**-1
log.retention.hours**The number of hours to keep a log file before deleting it (in hours), tertiary to log.retention.ms property**168
log.retention.minutes**The number of minutes to keep a log file before deleting it (in minutes), secondary to log.retention.ms property. If not set, the value in log.retention.hours is used**null
log.retention.ms**The number of milliseconds to keep a log file before deleting it (in milliseconds), If not set, the value in log.retention.minutes is used**null
log.roll.hours**The maximum time before a new log segment is rolled out (in hours), secondary to log.roll.ms property**168
log.roll.jitter.hours**The maximum jitter to subtract from logRollTimeMillis (in hours), secondary to log.roll.jitter.ms property**0
log.roll.jitter.ms**The maximum jitter to subtract from logRollTimeMillis (in milliseconds). If not set, the value in log.roll.jitter.hours is used**null
log.roll.ms**The maximum time before a new log segment is rolled out (in milliseconds). If not set, the value in log.roll.hours is used**null
log.segment.bytes**The maximum size of a single log file**1073741824
log.segment.delete.delay.ms**The amount of time to wait before deleting a file from the filesystem**60000
message.max.bytes**The largest record batch size allowed by Kafka. If this is increased and there are consumers older than 0.10.2, the consumers' fetch size must also be increased so that the they can fetch record batches this large.In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.This can be set per topic with the topic level max.message.bytes config.**1000012
min.insync.replicas**When a producer sets acks to "all" (or "-1"), min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend).When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of "all". This will ensure that the producer raises an exception if a majority of replicas do not receive a write.**1
num.io.threads**The number of threads that the server uses for processing requests, which may include disk I/O**8
num.network.threads**The number of threads that the server uses for receiving requests from the network and sending responses to the network**3
num.recovery.threads.per.data.dir**The number of threads per data directory to be used for log recovery at startup and flushing at shutdown**1
num.replica.alter.log.dirs.threads**The number of threads that can move replicas between log directories, which may include disk I/O**null
num.replica.fetchers**Number of fetcher threads used to replicate messages from a source broker. Increasing this value can increase the degree of I/O parallelism in the follower broker.**1
offset.metadata.max.bytes**The maximum size for a metadata entry associated with an offset commit**4096
offsets.commit.required.acks**The required acks before the commit can be accepted. In general, the default (-1) should not be overridden**-1
offsets.commit.timeout.ms**Offset commit will be delayed until all replicas for the offsets topic receive the commit or this timeout is reached. This is similar to the producer request timeout.**5000
offsets.load.buffer.size**Batch size for reading from the offsets segments when loading offsets into the cache.**5242880
offsets.retention.check.interval.ms**Frequency at which to check for stale offsets**600000
offsets.retention.minutes**Offsets older than this retention period will be discarded**10080
offsets.topic.compression.codec**Compression codec for the offsets topic - compression may be used to achieve "atomic" commits**0
offsets.topic.num.partitions**The number of partitions for the offset commit topic (should not change after deployment)**50
offsets.topic.replication.factor**The replication factor for the offsets topic (set higher to ensure availability). Internal topic creation will fail until the cluster size meets this replication factor requirement.**3
offsets.topic.segment.bytes**The offsets topic segment bytes should be kept relatively small in order to facilitate faster log compaction and cache loads**104857600
port**DEPRECATED: only used when `listeners` is not set. Use `listeners` instead.  the port to listen and accept connections on**9092
queued.max.requests**The number of queued requests allowed before blocking the network threads**500
quota.consumer.default**DEPRECATED: Used only when dynamic default quotas are not configured for  or  in Zookeeper. Any consumer distinguished by clientId/consumer group will get throttled if it fetches more bytes than this value per-second**9223372036854775807
quota.producer.default**DEPRECATED: Used only when dynamic default quotas are not configured for ,  or  in Zookeeper. Any producer distinguished by clientId will get throttled if it produces more bytes than this value per-second**9223372036854775807
replica.fetch.min.bytes**Minimum bytes expected for each fetch response. If not enough bytes, wait up to replicaMaxWaitTimeMs**1
replica.fetch.wait.max.ms**max wait time for each fetcher request issued by follower replicas. This value should always be less than the replica.lag.time.max.ms at all times to prevent frequent shrinking of ISR for low throughput topics**500
replica.high.watermark.checkpoint.interval.ms**The frequency with which the high watermark is saved out to disk**5000
replica.lag.time.max.ms**If a follower hasn't sent any fetch requests or hasn't consumed up to the leaders log end offset for at least this time, the leader will remove the follower from isr**10000
replica.socket.receive.buffer.bytes**The socket receive buffer for network requests**65536
replica.socket.timeout.ms**The socket timeout for network requests. Its value should be at least replica.fetch.wait.max.ms**30000
request.timeout.ms**The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.**30000
socket.receive.buffer.bytes**The SO_RCVBUF buffer of the socket sever sockets. If the value is -1, the OS default will be used.**102400
socket.request.max.bytes**The maximum number of bytes in a socket request**104857600
socket.send.buffer.bytes**The SO_SNDBUF buffer of the socket sever sockets. If the value is -1, the OS default will be used.**102400
transaction.max.timeout.ms**The maximum allowed timeout for transactions. If a clients requested transaction time exceed this, then the broker will return an error in InitProducerIdRequest. This prevents a client from too large of a timeout, which can stall consumers reading from topics included in the transaction.**900000
transaction.state.log.load.buffer.size**Batch size for reading from the transaction log segments when loading producer ids and transactions into the cache.**5242880
transaction.state.log.min.isr**Overridden min.insync.replicas config for the transaction topic.**2
transaction.state.log.num.partitions**The number of partitions for the transaction topic (should not change after deployment).**50
transaction.state.log.replication.factor**The replication factor for the transaction topic (set higher to ensure availability). Internal topic creation will fail until the cluster size meets this replication factor requirement.**3
transaction.state.log.segment.bytes**The transaction topic segment bytes should be kept relatively small in order to facilitate faster log compaction and cache loads**104857600
transactional.id.expiration.ms**The maximum amount of time in ms that the transaction coordinator will wait before proactively expire a producer's transactional id without receiving any transaction status updates from it.**604800000
unclean.leader.election.enable**Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss**false
zookeeper.connection.timeout.ms**The max time that the client waits to establish a connection to zookeeper. If not set, the value in zookeeper.session.timeout.ms is used**null
zookeeper.max.in.flight.requests**The maximum number of unacknowledged requests the client will send to Zookeeper before blocking.**10
zookeeper.session.timeout.ms**Zookeeper session timeout**6000
zookeeper.set.acl**Set client to use secure ACLs**false
broker.id.generation.enable**Enable automatic broker id generation on the server. When enabled the value configured for reserved.broker.max.id should be reviewed.**true
broker.rack**Rack of the broker. This will be used in rack aware replication assignment for fault tolerance. Examples: `RACK1`, `us-east-1d`**null
connections.max.idle.ms**Idle connections timeout: the server socket processor threads close the connections that idle more than this**600000
controlled.shutdown.enable**Enable controlled shutdown of the server**true
controlled.shutdown.max.retries**Controlled shutdown can fail for multiple reasons. This determines the number of retries when such failure happens**3
controlled.shutdown.retry.backoff.ms**Before each retry, the system needs time to recover from the state that caused the previous failure (Controller fail over, replica lag etc). This config determines the amount of time to wait before retrying.**5000
controller.socket.timeout.ms**The socket timeout for controller-to-broker channels**30000
default.replication.factor**default replication factors for automatically created topics**1
delegation.token.expiry.time.ms**The token validity time in seconds before the token needs to be renewed. Default value 1 day.**86400000
delegation.token.master.key**Master/secret key to generate and verify delegation tokens. Same key must be configured across all the brokers.  If the key is not set or set to empty string, brokers will disable the delegation token support.**null
delegation.token.max.lifetime.ms**The token has a maximum lifetime beyond which it cannot be renewed anymore. Default value 7 days.**604800000
delete.records.purgatory.purge.interval.requests**The purge interval (in number of requests) of the delete records request purgatory**1
fetch.purgatory.purge.interval.requests**The purge interval (in number of requests) of the fetch request purgatory**1000
group.initial.rebalance.delay.ms**The amount of time the group coordinator will wait for more consumers to join a new group before performing the first rebalance. A longer delay means potentially fewer rebalances, but increases the time until processing begins.**3000
group.max.session.timeout.ms**The maximum allowed session timeout for registered consumers. Longer timeouts give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures.**300000
group.min.session.timeout.ms**The minimum allowed session timeout for registered consumers. Shorter timeouts result in quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources.**6000
inter.broker.listener.name**Name of listener used for communication between brokers. If this is unset, the listener name is defined by security.inter.broker.protocol. It is an error to set this and security.inter.broker.protocol properties at the same time.**null
inter.broker.protocol.version**Specify which version of the inter-broker protocol will be used.  This is typically bumped after all brokers were upgraded to a new version.  Example of some valid values are: 0.8.0, 0.8.1, 0.8.1.1, 0.8.2, 0.8.2.0, 0.8.2.1, 0.9.0.0, 0.9.0.1 Check ApiVersion for the full list.**2.0-IV1
log.cleaner.backoff.ms**The amount of time to sleep when there are no logs to clean**15000
log.cleaner.dedupe.buffer.size**The total memory used for log deduplication across all cleaner threads**134217728
log.cleaner.delete.retention.ms**How long are delete records retained?**86400000
log.cleaner.enable**Enable the log cleaner process to run on the server. Should be enabled if using any topics with a cleanup.policy=compact including the internal offsets topic. If disabled those topics will not be compacted and continually grow in size.**true
log.cleaner.io.buffer.load.factor**Log cleaner dedupe buffer load factor. The percentage full the dedupe buffer can become. A higher value will allow more log to be cleaned at once but will lead to more hash collisions**0.9
log.cleaner.io.buffer.size**The total memory used for log cleaner I/O buffers across all cleaner threads**524288
log.cleaner.io.max.bytes.per.second**The log cleaner will be throttled so that the sum of its read and write i/o will be less than this value on average**1.7976931348623157E308
log.cleaner.min.cleanable.ratio**The minimum ratio of dirty log to total log for a log to eligible for cleaning**0.5
log.cleaner.min.compaction.lag.ms**The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.**0
log.cleaner.threads**The number of background threads to use for log cleaning**1
log.cleanup.policy**The default cleanup policy for segments beyond the retention window. A comma separated list of valid policies. Valid policies are: "delete" and "compact"**delete
log.index.interval.bytes**The interval with which we add an entry to the offset index**4096
log.index.size.max.bytes**The maximum size in bytes of the offset index**10485760
log.message.format.version**Specify the message format version the broker will use to append messages to the logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check ApiVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don't understand.**2.0-IV1
log.message.timestamp.difference.max.ms**The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If log.message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if log.message.timestamp.type=LogAppendTime.The maximum timestamp difference allowed should be no greater than log.retention.ms to avoid unnecessarily frequent log rolling.**9223372036854775807
log.message.timestamp.type**Define whether the timestamp in the message is message create time or log append time. The value should be either `CreateTime` or `LogAppendTime`**CreateTime
log.preallocate**Should pre allocate file when create new segment? If you are using Kafka on Windows, you probably need to set it to true.**false
log.retention.check.interval.ms**The frequency in milliseconds that the log cleaner checks whether any log is eligible for deletion**300000
max.connections.per.ip**The maximum number of connections we allow from each ip address. This can be set to 0 if there are overrides configured using max.connections.per.ip.overrides property**2147483647
max.connections.per.ip.overrides**A comma-separated list of per-ip or hostname overrides to the default maximum number of connections. An example value is "hostName:100,127.0.0.1:200"**""
max.incremental.fetch.session.cache.slots**The maximum number of incremental fetch sessions that we will maintain.**1000
num.partitions**The default number of log partitions per topic**1
password.encoder.old.secret**The old secret that was used for encoding dynamically configured passwords. This is required only when the secret is updated. If specified, all dynamically encoded passwords are decoded using this old secret and re-encoded using password.encoder.secret when broker starts up.**null
password.encoder.secret**The secret used for encoding dynamically configured passwords for this broker.**null
principal.builder.class**The fully qualified name of a class that implements the KafkaPrincipalBuilder interface, which is used to build the KafkaPrincipal object used during authorization. This config also supports the deprecated PrincipalBuilder interface which was previously used for client authentication over SSL. If no principal builder is defined, the default behavior depends on the security protocol in use. For SSL authentication, the principal name will be the distinguished name from the client certificate if one is provided; otherwise, if client authentication is not required, the principal name will be ANONYMOUS. For SASL authentication, the principal will be derived using the rules defined by sasl.kerberos.principal.to.local.rules if GSSAPI is in use, and the SASL authentication ID for other mechanisms. For PLAINTEXT, the principal will be ANONYMOUS.**null
producer.purgatory.purge.interval.requests**The purge interval (in number of requests) of the producer request purgatory**1000
queued.max.request.bytes**The number of queued bytes allowed before no more requests are read**-1
replica.fetch.backoff.ms**The amount of time to sleep when fetch partition error occurs.**1000
replica.fetch.max.bytes**The number of bytes of messages to attempt to fetch for each partition. This is not an absolute maximum, if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that progress can be made. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config).**1048576
replica.fetch.response.max.bytes**Maximum bytes expected for the entire fetch response. Records are fetched in batches, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that progress can be made. As such, this is not an absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config).**10485760
reserved.broker.max.id**Max number that can be used for a broker.id**1000
sasl.client.callback.handler.class**The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.**null
sasl.enabled.mechanisms**The list of SASL mechanisms enabled in the Kafka server. The list may contain any mechanism for which a security provider is available. Only GSSAPI is enabled by default.**GSSAPI
sasl.jaas.config**JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: 'loginModuleClass controlFlag (optionName=optionValue)*;'. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;**null
sasl.kerberos.kinit.cmd**Kerberos kinit command path.**/usr/bin/kinit
sasl.kerberos.min.time.before.relogin**Login thread sleep time between refresh attempts.**60000
sasl.kerberos.principal.to.local.rules**A list of rules for mapping from principal names to short names (typically operating system usernames). The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default, principal names of the form {username}/{hostname}@{REALM} are mapped to {username}. For more details on the format please see  security authorization and acls. Note that this configuration is ignored if an extension of KafkaPrincipalBuilder is provided by the principal.builder.class configuration.**DEFAULT
sasl.kerberos.service.name**The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.**null
sasl.kerberos.ticket.renew.jitter**Percentage of random jitter added to the renewal time.**0.05
sasl.kerberos.ticket.renew.window.factor**Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.**0.8
sasl.login.callback.handler.class**The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler**null
sasl.login.class**The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin**null
sasl.login.refresh.buffer.seconds**The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of  300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.**300
sasl.login.refresh.min.period.seconds**The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified.  This value and  sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.**60
sasl.login.refresh.window.factor**Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.**0.8
sasl.login.refresh.window.jitter**The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.**0.05
sasl.mechanism.inter.broker.protocol**SASL mechanism used for inter-broker communication. Default is GSSAPI.**GSSAPI
sasl.server.callback.handler.class**The fully qualified name of a SASL server callback handler class that implements the AuthenticateCallbackHandler interface. Server callback handlers must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.plain.sasl.server.callback.handler.class=com.example.CustomPlainCallbackHandler.**null
security.inter.broker.protocol**Security protocol used to communicate between brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL. It is an error to set this and inter.broker.listener.name properties at the same time.**PLAINTEXT
ssl.cipher.suites**A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.**""
ssl.client.auth**Configures kafka broker to request client authentication. The following settings are common:   ssl.client.auth=required If set to required client authentication is required. ssl.client.auth=requested This means client authentication is optional. unlike requested , if this option is set client can choose not to provide authentication information about itself ssl.client.auth=none This means client authentication is not needed.**none
ssl.enabled.protocols**The list of protocols enabled for SSL connections.**TLSv1.2,TLSv1.1,TLSv1
ssl.key.password**The password of the private key in the key store file. This is optional for client.**null
ssl.keymanager.algorithm**The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.**SunX509
ssl.keystore.location**The location of the key store file. This is optional for client and can be used for two-way authentication for client.**null
ssl.keystore.password**The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured. **null
ssl.keystore.type**The file format of the key store file. This is optional for client.**JKS
ssl.protocol**The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.**TLS
ssl.provider**The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.**null
ssl.trustmanager.algorithm**The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.**PKIX
ssl.truststore.location**The location of the trust store file. **null
ssl.truststore.password**The password for the trust store file. If a password is not set access to the truststore is still available, but integrity checking is disabled.**null
ssl.truststore.type**The file format of the trust store file.**JKS
alter.config.policy.class.name**The alter configs policy class that should be used for validation. The class should implement the org.apache.kafka.server.policy.AlterConfigPolicy interface.**null
alter.log.dirs.replication.quota.window.num**The number of samples to retain in memory for alter log dirs replication quotas**11
alter.log.dirs.replication.quota.window.size.seconds**The time span of each sample for alter log dirs replication quotas**1
authorizer.class.name**The authorizer class that should be used for authorization**""
client.quota.callback.class**The fully qualified name of a class that implements the ClientQuotaCallback interface, which is used to determine quota limits applied to client requests. By default, ,  or  quotas stored in ZooKeeper are applied. For any given request, the most specific quota that matches the user principal of the session and the client-id of the request is applied.**null
create.topic.policy.class.name**The create topic policy class that should be used for validation. The class should implement the org.apache.kafka.server.policy.CreateTopicPolicy interface.**null
delegation.token.expiry.check.interval.ms**Scan interval to remove expired delegation tokens.**3600000
listener.security.protocol.map**Map between listener names and security protocols. This must be defined for the same security protocol to be usable in more than one port or IP. For example, internal and external traffic can be separated even if SSL is required for both. Concretely, the user could define listeners with names INTERNAL and EXTERNAL and this property as: `INTERNAL:SSL,EXTERNAL:SSL`. As shown, key and value are separated by a colon and map entries are separated by commas. Each listener name should only appear once in the map. Different security (SSL and SASL) settings can be configured for each listener by adding a normalised prefix (the listener name is lowercased) to the config name. For example, to set a different keystore for the INTERNAL listener, a config with name `listener.name.internal.ssl.keystore.location` would be set. If the config for the listener name is not set, the config will fallback to the generic config (i.e. `ssl.keystore.location`). **PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
log.message.downconversion.enable**This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to false, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with UNSUPPORTED_VERSION error for consume requests from such older clients. This configurationdoes not apply to any message format conversion that might be required for replication to followers.**true
metric.reporters**A list of classes to use as metrics reporters. Implementing the org.apache.kafka.common.metrics.MetricsReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.**""
metrics.num.samples**The number of samples maintained to compute metrics.**2
metrics.recording.level**The highest recording level for metrics.**INFO
metrics.sample.window.ms**The window of time a metrics sample is computed over.**30000
password.encoder.cipher.algorithm**The Cipher algorithm used for encoding dynamically configured passwords.**AES/CBC/PKCS5Padding
password.encoder.iterations**The iteration count used for encoding dynamically configured passwords.**4096
password.encoder.key.length**The key length used for encoding dynamically configured passwords.**128
password.encoder.keyfactory.algorithm**The SecretKeyFactory algorithm used for encoding dynamically configured passwords. Default is PBKDF2WithHmacSHA512 if available and PBKDF2WithHmacSHA1 otherwise.**null
quota.window.num**The number of samples to retain in memory for client quotas**11
quota.window.size.seconds**The time span of each sample for client quotas**1
replication.quota.window.num**The number of samples to retain in memory for replication quotas**11
replication.quota.window.size.seconds**The time span of each sample for replication quotas**1
ssl.endpoint.identification.algorithm**The endpoint identification algorithm to validate server hostname using server certificate. **https
ssl.secure.random.implementation**The SecureRandom PRNG implementation to use for SSL cryptography operations. **null
transaction.abort.timed.out.transaction.cleanup.interval.ms**The interval at which to rollback transactions that have timed out**60000
transaction.remove.expired.transaction.cleanup.interval.ms**The interval at which to remove transactions that have expired due to transactional.id.expiration.ms passing**3600000
zookeeper.sync.time.ms**How far a ZK follower can be behind a ZK leader**2000
cleanup.policy**A string that is either "delete" or "compact". This string designates the retention policy to use on old log segments. The default policy ("delete") will discard old segments when their retention time or size limit has been reached. The "compact" setting will enable log compaction on the topic.**delete
delete.retention.ms**The amount of time to retain delete tombstone markers for log compacted topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).**86400000
file.delete.delay.ms**The time to wait before deleting a file from the filesystem**60000
flush.messages**This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system's background flush capabilities as it is more efficient. This setting can be overridden on a per-topic basis (see the per-topic configuration section).**9223372036854775807
flush.ms**This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system's background flush capabilities as it is more efficient.**9223372036854775807
follower.replication.throttled.replicas**A list of replicas for which log replication should be throttled on the follower side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard '*' can be used to throttle all replicas for this topic.**""
index.interval.bytes**This setting controls how frequently Kafka adds an index entry to it's offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don't need to change this.**4096
leader.replication.throttled.replicas**A list of replicas for which log replication should be throttled on the leader side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard '*' can be used to throttle all replicas for this topic.**""
max.message.bytes**The largest record batch size allowed by Kafka. If this is increased and there are consumers older than 0.10.2, the consumers' fetch size must also be increased so that the they can fetch record batches this large.In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.**1000012
message.format.version**Specify the message format version the broker will use to append messages to the logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check ApiVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don't understand.**2.0-IV1
message.timestamp.difference.max.ms**The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime.**9223372036854775807
message.timestamp.type**Define whether the timestamp in the message is message create time or log append time. The value should be either `CreateTime` or `LogAppendTime`**CreateTime
min.cleanable.dirty.ratio**This configuration controls how frequently the log compactor will attempt to clean the log (assuming log compaction is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log.**0.5
min.compaction.lag.ms**The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.**0
preallocate**True if we should preallocate the file on disk when creating a new log segment.**false
retention.bytes**This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes.**-1
retention.ms**This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.**604800000
segment.bytes**This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over retention.**1073741824
segment.index.bytes**This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting.**10485760
segment.jitter.ms**The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling**0
segment.ms**This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn't full to ensure that retention can delete or compact old data.**604800000
message.downconversion.enable**This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to false, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with UNSUPPORTED_VERSION error for consume requests from such older clients. This configurationdoes not apply to any message format conversion that might be required for replication to followers.**true
key.serializer**Serializer class for key that implements the org.apache.kafka.common.serialization.Serializer interface.**
value.serializer**Serializer class for value that implements the org.apache.kafka.common.serialization.Serializer interface.**
acks**The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the  durability of records that are sent. The following settings are allowed:   acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the retries configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to -1. acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks=-1 setting.**1
bootstrap.servers**A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrappingthis list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).**""
buffer.memory**The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block for max.block.ms after which it will throw an exception.This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests.**33554432
retries**Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries without setting max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first.**0
batch.size**The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes. No attempt will be made to batch records larger than this size. Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent. A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records.**16384
client.id**An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.**""
linger.ms**The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delaythat is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5, for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absence of load.**0
max.block.ms**The configuration controls how long KafkaProducer.send() and KafkaProducer.partitionsFor() will block.These methods can be blocked either because the buffer is full or metadata unavailable.Blocking in the user-supplied serializers or partitioner will not be counted against this timeout.**60000
max.request.size**The maximum size of a request in bytes. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests. This is also effectively a cap on the maximum record batch size. Note that the server has its own cap on record batch size which may be different from this.**1048576
partitioner.class**Partitioner class that implements the org.apache.kafka.clients.producer.Partitioner interface.**org.apache.kafka.clients.producer.internals.DefaultPartitioner
receive.buffer.bytes**The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.**32768
sasl.mechanism**SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.**GSSAPI
security.protocol**Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.**PLAINTEXT
send.buffer.bytes**The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.**131072
enable.idempotence**When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream. If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. Note that enabling idempotence requires max.in.flight.requests.per.connection to be less than or equal to 5, retries to be greater than 0 and acks must be 'all'. If these values are not explicitly set by the user, suitable values will be chosen. If incompatible values are set, a ConfigException will be thrown.**false
interceptor.classes**A list of classes to use as interceptors. Implementing the org.apache.kafka.clients.producer.ProducerInterceptor interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.**""
max.in.flight.requests.per.connection**The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).**5
metadata.max.age.ms**The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.**300000
reconnect.backoff.max.ms**The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.**1000
reconnect.backoff.ms**The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.**50
retry.backoff.ms**The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.**100
transaction.timeout.ms**The maximum amount of time in ms that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction.If this value is larger than the transaction.max.timeout.ms setting in the broker, the request will fail with a `InvalidTransactionTimeout` error.**60000
transactional.id**The TransactionalId to use for transactional delivery. This enables reliability semantics which span multiple producer sessions since it allows the client to guarantee that transactions using the same TransactionalId have been completed prior to starting any new transactions. If no TransactionalId is provided, then the producer is limited to idempotent delivery. Note that enable.idempotence must be enabled if a TransactionalId is configured. The default is null, which means transactions cannot be used. Note that transactions requires a cluster of at least three brokers by default what is the recommended setting for production; for development you can change this, by adjusting broker setting `transaction.state.log.replication.factor`.**null
key.deserializer**Deserializer class for key that implements the org.apache.kafka.common.serialization.Deserializer interface.**
value.deserializer**Deserializer class for value that implements the org.apache.kafka.common.serialization.Deserializer interface.**
fetch.min.bytes**The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.**1
group.id**A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.**""
heartbeat.interval.ms**The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.**3000
max.partition.fetch.bytes**The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). See fetch.max.bytes for limiting the consumer request size.**1048576
session.timeout.ms**The timeout used to detect consumer failures when using Kafka's group management facility. The consumer sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this consumer from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.**10000
auto.offset.reset**What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): earliest: automatically reset the offset to the earliest offsetlatest: automatically reset the offset to the latest offsetnone: throw exception to the consumer if no previous offset is found for the consumer's groupanything else: throw exception to the consumer.**latest
default.api.timeout.ms**Specifies the timeout (in milliseconds) for consumer APIs that could block. This configuration is used as the default timeout for all consumer operations that do not explicitly accept a timeout parameter.**60000
enable.auto.commit**If true the consumer's offset will be periodically committed in the background.**true
exclude.internal.topics**Whether records from internal topics (such as offsets) should be exposed to the consumer. If set to true the only way to receive records from an internal topic is subscribing to it.**true
fetch.max.bytes**The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.**52428800
isolation.level**Controls how to read messages written transactionally. If set to read_committed, consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. Messages will always be returned in offset order. Hence, in  read_committed mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, read_committed consumers will not be able to read up to the high watermark when there are in flight transactions. Further, when in read_committed the seekToEnd method will return the LSO**read_uncommitted
max.poll.interval.ms**The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. **300000
max.poll.records**The maximum number of records returned in a single call to poll().**500
partition.assignment.strategy**The class name of the partition assignment strategy that the client will use to distribute partition ownership amongst consumer instances when group management is used**class org.apache.kafka.clients.consumer.RangeAssignor
auto.commit.interval.ms**The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.**5000
check.crcs**Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.**true
fetch.max.wait.ms**The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.**500
consumer.id** Generated automatically if not set. **null
socket.timeout.ms**The socket timeout for network requests. The actual timeout set will be fetch.wait.max.ms + socket.timeout.ms.**30 * 1000
fetch.message.max.bytes**The number of bytes of messages to attempt to fetch for each topic-partition in each fetch request. These bytes will be read into memory for each partition, so this helps control the memory used by the consumer. The fetch request size must be at least as large as the maximum message size the server allows or else it is possible for the producer to send messages larger than the consumer can fetch.**1024 * 1024
num.consumer.fetchers**The number fetcher threads used to fetch data.**1
auto.commit.enable**If true, periodically commit to ZooKeeper the offset of messages already fetched by the consumer. This committed offset will be used when the process fails as the position from which the new consumer will begin.**true
queued.max.message.chunks**Max number of message chunks buffered for consumption. Each chunk can be up to fetch.message.max.bytes.**2
rebalance.max.retries**When a new consumer joins a consumer group the set of consumers attempt to "rebalance" the load to assign partitions to each consumer. If the set of consumers changes while this assignment is taking place the rebalance will fail and retry. This setting controls the maximum number of attempts before giving up.**4
fetch.wait.max.ms**The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy fetch.min.bytes**100
rebalance.backoff.ms**Backoff time between retries during rebalance. If not set explicitly, the value in zookeeper.sync.time.ms is used.         **2000
refresh.leader.backoff.ms**Backoff time to wait before trying to determine the leader of a partition that has just lost its leader.**200
consumer.timeout.ms**Throw a timeout exception to the consumer if no message is available for consumption after the specified interval**-1
zookeeper.session.timeout.ms**ZooKeeper session timeout. If the consumer fails to heartbeat to ZooKeeper for this period of time it is considered dead and a rebalance will occur.**6000
zookeeper.sync.time.ms**How far a ZK follower can be behind a ZK leader**2000
offsets.storage**Select where offsets should be stored (zookeeper or kafka).**zookeeper
offsets.channel.backoff.ms**The backoff period when reconnecting the offsets channel or retrying failed offset fetch/commit requests.**1000
offsets.channel.socket.timeout.ms**Socket timeout when reading responses for offset fetch/commit requests. This timeout is also used for ConsumerMetadata requests that are used to query for the offset manager.**10000
offsets.commit.max.retries**Retry the offset commit up to this many times on failure. This retry count only applies to offset commits during shut-down. It does not apply to commits originating from the auto-commit thread. It also does not apply to attempts to query for the offset coordinator before committing offsets. i.e., if a consumer metadata request fails for any reason, it will be retried and that retry does not count toward this limit.**5
dual.commit.enabled**If you are using "kafka" as offsets.storage, you can dual commit offsets to ZooKeeper (in addition to Kafka). This is required during migration from zookeeper-based offset storage to kafka-based offset storage. With respect to any given consumer group, it is safe to turn this off after all instances within that group have been migrated to the new version that commits offsets to the broker (instead of directly to ZooKeeper).**true
config.storage.topic**The name of the Kafka topic where connector configurations are stored**
key.converter**Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the keys in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.**
offset.storage.topic**The name of the Kafka topic where connector offsets are stored**
status.storage.topic**The name of the Kafka topic where connector and task status are stored**
value.converter**Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.**
rebalance.timeout.ms**The maximum allowed time for each worker to join the group once a rebalance has begun. This is basically a limit on the amount of time needed for all tasks to flush any pending data and commit offsets. If the timeout is exceeded, then the worker will be removed from the group, which will cause offset commit failures.**60000
worker.sync.timeout.ms**When the worker is out of sync with other workers and needs to resynchronize configurations, wait up to this amount of time before giving up, leaving the group, and waiting a backoff period before rejoining.**3000
worker.unsync.backoff.ms**When the worker is out of sync with other workers and  fails to catch up within worker.sync.timeout.ms, leave the Connect cluster for this long before rejoining.**300000
access.control.allow.methods**Sets the methods supported for cross origin requests by setting the Access-Control-Allow-Methods header. The default value of the Access-Control-Allow-Methods header allows cross origin requests for GET, POST and HEAD.**""
access.control.allow.origin**Value to set the Access-Control-Allow-Origin header to for REST API requests.To enable cross origin access, set this to the domain of the application that should be permitted to access the API, or '*' to allow access from any domain. The default value only allows access from the domain of the REST API.**""
config.providers**Comma-separated names of ConfigProvider classes, loaded and used in the order specified. Implementing the interface  ConfigProvider allows you to replace variable references in connector configurations, such as for externalized secrets. **""
config.storage.replication.factor**Replication factor used when creating the configuration storage topic**3
header.converter**HeaderConverter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the header values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro. By default, the SimpleHeaderConverter is used to serialize header values to strings and deserialize them by inferring the schemas.**org.apache.kafka.connect.storage.SimpleHeaderConverter
internal.key.converter**Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the keys in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro. This setting controls the format used for internal bookkeeping data used by the framework, such as configs and offsets, so users can typically use any functioning Converter implementation. Deprecated; will be removed in an upcoming version.**org.apache.kafka.connect.json.JsonConverter
internal.value.converter**Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro. This setting controls the format used for internal bookkeeping data used by the framework, such as configs and offsets, so users can typically use any functioning Converter implementation. Deprecated; will be removed in an upcoming version.**org.apache.kafka.connect.json.JsonConverter
offset.flush.interval.ms**Interval at which to try committing offsets for tasks.**60000
offset.flush.timeout.ms**Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt.**5000
offset.storage.partitions**The number of partitions used when creating the offset storage topic**25
offset.storage.replication.factor**Replication factor used when creating the offset storage topic**3
plugin.path**List of paths separated by commas (,) that contain plugins (connectors, converters, transformations). The list should consist of top level directories that include any combination of:  a) directories immediately containing jars with plugins and their dependencies b) uber-jars with plugins and their dependencies c) directories immediately containing the package directory structure of classes of plugins and their dependencies Note: symlinks will be followed to discover dependencies or plugins. Examples: plugin.path=/usr/local/share/java,/usr/local/share/kafka/plugins,/opt/connectors**null
rest.advertised.host.name**If this is set, this is the hostname that will be given out to other workers to connect to.**null
rest.advertised.listener**Sets the advertised listener (HTTP or HTTPS) which will be given to other workers to use.**null
rest.advertised.port**If this is set, this is the port that will be given out to other workers to connect to.**null
rest.extension.classes**Comma-separated names of ConnectRestExtension classes, loaded and called in the order specified. Implementing the interface  ConnectRestExtension allows you to inject into Connect's REST API user defined resources like filters. Typically used to add custom capability like logging, security, etc. **""
rest.host.name**Hostname for the REST API. If this is set, it will only bind to this interface.**null
rest.port**Port for the REST API to listen on.**8083
status.storage.partitions**The number of partitions used when creating the status storage topic**5
status.storage.replication.factor**Replication factor used when creating the status storage topic**3
task.shutdown.graceful.timeout.ms**Amount of time to wait for tasks to shutdown gracefully. This is the total amount of time, not per task. All task have shutdown triggered, then they are waited on sequentially.**5000
application.id**An identifier for the stream processing application. Must be unique within the Kafka cluster. It is used as 1) the default client-id prefix, 2) the group-id for membership management, 3) the changelog topic prefix.**
replication.factor**The replication factor for change log topics and repartition topics created by the stream processing application.**1
state.dir**Directory location for state store.**/tmp/kafka-streams
cache.max.bytes.buffering**Maximum number of memory bytes to be used for buffering across all threads**10485760
default.deserialization.exception.handler**Exception handling class that implements the org.apache.kafka.streams.errors.DeserializationExceptionHandler interface.**org.apache.kafka.streams.errors.LogAndFailExceptionHandler
default.key.serde** Default serializer / deserializer class for key that implements the org.apache.kafka.common.serialization.Serde interface. Note when windowed serde class is used, one needs to set the inner serde class that implements the org.apache.kafka.common.serialization.Serde interface via 'default.windowed.key.serde.inner' or 'default.windowed.value.serde.inner' as well**org.apache.kafka.common.serialization.Serdes$ByteArraySerde
default.production.exception.handler**Exception handling class that implements the org.apache.kafka.streams.errors.ProductionExceptionHandler interface.**org.apache.kafka.streams.errors.DefaultProductionExceptionHandler
default.timestamp.extractor**Default timestamp extractor class that implements the org.apache.kafka.streams.processor.TimestampExtractor interface.**org.apache.kafka.streams.processor.FailOnInvalidTimestamp
default.value.serde**Default serializer / deserializer class for value that implements the org.apache.kafka.common.serialization.Serde interface. Note when windowed serde class is used, one needs to set the inner serde class that implements the org.apache.kafka.common.serialization.Serde interface via 'default.windowed.key.serde.inner' or 'default.windowed.value.serde.inner' as well**org.apache.kafka.common.serialization.Serdes$ByteArraySerde
num.standby.replicas**The number of standby replicas for each task.**0
num.stream.threads**The number of threads to execute stream processing.**1
processing.guarantee**The processing guarantee that should be used. Possible values are at_least_once (default) and exactly_once. Note that exactly-once processing requires a cluster of at least three brokers by default what is the recommended setting for production; for development you can change this, by adjusting broker setting `transaction.state.log.replication.factor`.**at_least_once
topology.optimization**A configuration telling Kafka Streams if it should optimize the topology, disabled by default**none
application.server**A host:port pair pointing to an embedded user defined endpoint that can be used for discovering the locations of state stores within a single KafkaStreams application**""
buffered.records.per.partition**The maximum number of records to buffer per partition.**1000
commit.interval.ms**The frequency with which to save the position of the processor. (Note, if 'processing.guarantee' is set to 'exactly_once', the default value is 100, otherwise the default value is 30000.**30000
partition.grouper**Partition grouper class that implements the org.apache.kafka.streams.processor.PartitionGrouper interface.**org.apache.kafka.streams.processor.DefaultPartitionGrouper
poll.ms**The amount of time in milliseconds to block waiting for input.**100
rocksdb.config.setter**A Rocks DB config setter class or class name that implements the org.apache.kafka.streams.state.RocksDBConfigSetter interface**null
state.cleanup.delay.ms**The amount of time in milliseconds to wait before deleting state when a partition has migrated. Only state directories that have not been modified for at least state.cleanup.delay.ms will be removed**600000
upgrade.from**Allows upgrading from versions 0.10.0/0.10.1/0.10.2/0.11.0/1.0/1.1 to version 1.2 (or newer) in a backward compatible way. When upgrading from 1.2 to a newer version it is not required to specify this config.Default is null. Accepted values are "0.10.0", "0.10.1", "0.10.2", "0.11.0", "1.0", "1.1" (for upgrading from the corresponding old version).**null
windowstore.changelog.additional.retention.ms**Added to a windows maintainMs to ensure data is not deleted from the log prematurely. Allows for clock drift. Default is 1 day**86400000
